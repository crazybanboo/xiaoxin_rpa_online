# Task ID: 3
# Title: JWT认证系统实现
# Status: pending
# Dependencies: 2
# Priority: high
# Description: 实现基于JWT的用户认证系统，包括登录、token验证和权限管理
# Details:
1. 使用python-jose实现JWT token生成和验证。2. 创建登录API接口(/api/auth/login)，实现密码hash验证。3. 实现JWT中间件进行请求认证。4. 在前端实现登录页面，集成token存储和自动刷新机制。5. 配置axios请求拦截器自动添加Authorization header。

# Test Strategy:
测试登录接口功能，验证token生成和验证流程，测试权限中间件拦截未授权请求

# Subtasks:
## 1. JWT工具类实现 [pending]
### Dependencies: None
### Description: 使用python-jose实现JWT token的生成、验证和解析功能
### Details:
1. 安装并配置python-jose库。2. 创建JWT工具类，实现token生成方法，包括设置过期时间、用户信息编码。3. 实现token验证和解析方法，处理过期、无效token的异常情况。4. 配置JWT密钥和算法参数。5. 添加token刷新机制支持。

## 2. 登录API接口开发 [pending]
### Dependencies: 3.1
### Description: 创建用户登录API端点，实现密码验证和token颁发
### Details:
1. 创建/api/auth/login POST接口。2. 实现用户名密码验证逻辑，与数据库中的管理员信息比对。3. 使用bcrypt进行密码hash验证。4. 登录成功后生成并返回JWT token。5. 添加登录失败次数限制和安全措施。6. 实现登录日志记录功能。

## 3. JWT认证中间件实现 [pending]
### Dependencies: 3.1
### Description: 开发FastAPI中间件，自动验证请求中的JWT token
### Details:
1. 创建JWT认证中间件类。2. 实现从请求头Authorization中提取token的逻辑。3. 集成JWT工具类进行token验证。4. 处理token过期、无效等异常情况，返回相应HTTP状态码。5. 实现路由白名单机制，排除不需要认证的接口。6. 将验证通过的用户信息注入到请求上下文中。

## 4. 前端登录页面开发 [pending]
### Dependencies: None
### Description: 使用Vue 3和Element Plus创建用户登录界面
### Details:
1. 创建登录页面组件，使用Element Plus表单组件。2. 实现用户名密码输入验证，包括格式检查和必填验证。3. 集成axios调用登录API接口。4. 添加登录状态反馈，包括loading状态和错误提示。5. 实现登录成功后的页面跳转逻辑。6. 添加记住登录状态的复选框功能。

## 5. Token管理机制实现 [pending]
### Dependencies: 3.2, 3.4
### Description: 实现前端token存储、自动刷新和axios请求拦截器配置
### Details:
1. 使用localStorage或sessionStorage存储JWT token。2. 配置axios请求拦截器，自动在请求头中添加Authorization bearer token。3. 实现axios响应拦截器，处理401未授权状态。4. 开发token自动刷新机制，在token即将过期时自动续期。5. 实现用户登出功能，清除本地存储的token。6. 添加token过期后自动跳转到登录页的逻辑。

